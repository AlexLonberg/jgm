/* eslint-disable no-useless-escape */
import { describe, test, expect } from 'vitest'
import { RelPath } from './path.js'
import { Glob } from './glob.js'

describe('Glob', () => {
  test('–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞', () => {
    const root = RelPath.root()
    const path = (rel: string): RelPath => {
      return root.extendsPath(...rel.split('/'))
    }

    const cases: [Glob, ...[string, boolean][]][] = [
      // –õ—é–±–æ–π —Ñ–∞–π–ª –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
      [new Glob('*'), ['1', true], ['1/2', false]],
      // –õ—é–±–æ–π —Ñ–∞–π–ª –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
      [new Glob('*/*'), ['1', false], ['1/2', true], ['1/2/3', false]],
      // –ù–µ –º–µ–Ω–µ–µ –¥–≤—É—Ö —É—Ä–æ–≤–Ω–µ–π
      [new Glob('**/*/*'), ['1', false], ['1/2', true], ['1/2/3', true]],
      // –ì–ª—É–±–∏–Ω–∞ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞
      [new Glob('**/file'), ['file', true], ['1/file', true], ['1/2/file', true]],
      // ‚ö†Ô∏è –õ–∏—Ç–µ—Ä–∞–ª —Ç–∞–∫ –∂–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Ä–æ–≤–Ω–µ–º
      [new Glob('**/*/file'), ['file', false], ['1/file', true], ['1/2/file', true]],
      // –°—Ç—Ä–æ–≥–æ 2 —Å–∏–º–æ–ª–∞
      [new Glob('??'), ['1', false], ['12', true]],
      // –ù–µ –º–µ–Ω–µ–µ 2-—Ö —Å–∏–º–≤–æ–ª–æ–≤
      [new Glob('?*?'), ['1', false], ['12', true], ['123', true]],
      // –û–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. ‚ö†Ô∏è –ü—Ä–æ–±–µ–ª –∏ –ø—É—Å—Ç–æ—Ç–∞ - —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è
      [new Glob('s{,1,2, }e'), ['s1e', true], ['s2e', true], ['s3e', false], ['s e', true], ['se', true]],
      // –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
      [new Glob('**/file'), ['FILE', true], ['file', true]],
      [new Glob('**/file', { noIgnoreCase: true }), ['FILE', false], ['file', true]],
    ]

    for (const [gl, ...cs] of cases) {
      for (const [rel, result] of cs) {
        expect(gl.test(path(rel), false)).toBe(result)
      }
    }

    // –ù–∞–≥–ª—è–¥–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    const glob = new Glob('s{,1,2, }e')
    expect(glob.segments).toStrictEqual([
      { kind: 4, depth: 1, re: /^s(|1|2|\ )e$/i }
    ])
    for (const [rel, result] of [['s1e', true], ['s2e', true], ['s3e', false], ['s e', true], ['se', true]] as const) {
      expect(glob.test(path(rel), false)).toBe(result)
    }
  })

  test('–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—É—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤', () => {
    // –ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏ –∫ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –º–µ—Ç–æ–¥–æ–º can()
    const root = RelPath.root()
    const path = (rel: string): RelPath => root.extendsPath(...rel.split('/'))

    const glob = new Glob('src/**/*')
    // —Ç–µ—Å—Ç –ø—É—Ç–∏ –±—ã –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è
    expect(glob.test(path('src'), true)).toBe(false)
    // ... –Ω–æ –Ω–µ —Ç–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥
    expect(glob.can(path('src'))).toBe(true)
    expect(glob.can(path('src/bar'))).toBe(true)
    expect(glob.can(path('source'))).toBe(false)

    const cases: [string, ...[string, boolean][]][] = [
      // –¢—Ä–∏ —É—Ä–æ–≤–Ω—è, –≥–¥–µ foo –Ω–∞ –≤—Ç–æ—Ä–æ–º
      ['*/foo/*', ['bar', true], ['bar/foo', true], ['bar/box/foo', false], ['bar/foo/box', true], ['bar/foo/box/foo', false]],
      // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
      ['{src,source}', ['src', true], ['source', true], ['dist', false], ['src/utils', false]],
    ]

    for (const [pat, ...cs] of cases) {
      const gl = new Glob(pat)
      for (const [rel, result] of cs) {
        expect(gl.can(path(rel))).toBe(result)
      }
    }
  })

  test('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ', () => {
    const root = RelPath.root()
    const path = (rel: string): RelPath => {
      return root.extendsPath(...rel.split('/'))
    }
    // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
    // –õ—é–±–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º –ø—É—Ç–∏, –ø—Ä–æ–±–µ–ª–∞–º –∏ –ª–∏—à–Ω–∏–º —ç–∫—Ä–∞–Ω–∏—Ä—É—é—â–∏–º —Å–∏–º–≤–æ–ª–∞–º
    // –ò–º—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∏ –∫–æ–Ω–µ—á–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏ "foo  " –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞ –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–µ—Ç —Å
    // –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞/–∫–∞—Ç–∞–ª–æ–≥–∞. –ù–æ —Ç–µ–ª–æ {<...>} –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º
    const gl = new Glob('/foo \\ /bar{ } ')
    expect(gl.segments).toStrictEqual([
      { kind: 4, depth: 1, re: /^foo$/i },
      { kind: 4, depth: 1, re: /^bar(\ )$/i }
    ])
    expect(gl.test(path('foo/bar '), false)).toBe(true)
    expect(gl.test(path('foo /bar'), false)).toBe(false)
  })

  test('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å–ª–µ—à–µ–π', () => {
    // –õ—é–±–æ–π –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–µ—à –Ω–µ –º–æ–∂–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º —Å–µ–±—è –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    // –¢–∞–∫–∏–µ —Å–ª–µ—à–∏ —Å–ª–∏–≤–∞—é—Ç—Å—è –≤ –æ–¥–∏–Ω –∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–∏–º–≤–æ–ª—É
    // –°–∏–º–≤–æ–ª—ã /^[a-z_0-9]$/i –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É—é—Ç—Å—è
    const gl = new Glob('foo \\/ \\1 \\\\2')
    //           –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è ^
    expect(gl.segments).toStrictEqual([
      { kind: 4, depth: 1, re: /^foo$/i },
      { kind: 4, depth: 1, re: /^1\ 2$/i }
    ])

    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ UUID
    const root = RelPath.root()
    const uuid = new Glob('**/\\{????????-????-?????????-????????????\\}')
    expect(uuid.test(root.extends('{e799f7ea-80ed-49c7-b9f1-f78c6d2210af}'), false)).toBe(true)
  })

  test('–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Unicode', () => {
    const root = RelPath.root()
    const gl = new Glob('–ù–µ/en-Us/–ø—É—Ç—å*')
    expect(gl.segments).toStrictEqual([
      { kind: 4, depth: 1, re: /^\–ù\–µ$/i },
      { kind: 4, depth: 1, re: /^en\-Us$/i },
      { kind: 4, depth: 1, re: /^\–ø\—É\—Ç\—å.*/i },
    ])
    expect(gl.test(root.extendsPath('–ù–µ', 'en-Us', '–ø—É—Ç—å .—Ä—Ñ'), false)).toBe(true)

    // –î–ª—è emoji, –±–µ–∑ —Ñ–ª–∞–≥–∞ 'u' –Ω—É–∂–Ω–æ –¥–≤–∞ —Å–∏–º–≤–æ–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —é–Ω–∏–∫–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞,
    // –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤. –ò–Ω–∞—á–µ RegExp(,'u') –ª–æ–º–∞–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–π –∂–µ –æ—à–∏–±–∫–µ —Å –æ–±—Ä–∞—Ç–Ω—ã–º —Å–ª–µ—à–µ–º.
    const emoji = new Glob('–ù–µ/ü§î/??/–ø—É—Ç—å')
    expect(emoji.test(root.extendsPath('–ù–µ', 'ü§î', '–§–©', '–ø—É—Ç—å'), false)).toBe(true)
    expect(emoji.test(root.extendsPath('–ù–µ', 'ü§î', 'ü§î', '–ø—É—Ç—å'), false)).toBe(true)

    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Unicode –≤–∫–ª—é—á–∞–µ—Ç—Å—è –æ–ø—Ü–∏–µ–π, –Ω–æ —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—É —Å–∏–º–≤–æ–ª 'ü§ó', –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ \p{Emoji}
    // –í —ç—Ç–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –¥–ª—è emoji —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–∏–Ω '?'(–≤—ã—à–µ –¥–≤–∞)
    const glu = new Glob('?/?{—Ä—Ñ,com}*', { experimentalUnicode: true })
    expect(glu.segments).toStrictEqual([
      { kind: 4, depth: 1, re: /^.$/iu },
      { kind: 4, depth: 1, re: /^.(—Ä—Ñ|com).*/iu },
    ])
    expect(glu.test(root.extendsPath('ü§ó', 'ü§ó—Ä—Ñ'), false)).toBe(true)
    expect(glu.test(root.extendsPath('ü§ó', 'ü§ócom'), false)).toBe(true)

    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ Unicode
    // https://www.fileformat.info/info/unicode/category/index.htm
    // https://www.regular-expressions.info/unicode.html#category
    // –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ emoji –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å /^[\p{L}\p{N}\p{Emoji}_ -]$/u.test(char)
    //   new Glob('your/ü§ó/path', ...)
    // ... –Ω–æ –ª—É—á—à–µ —ç—Ç–æ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å
    const re1 = /\p{Emoji}/u
    expect(re1.test('ü§ó')).toBe(true)
    const re2 = new RegExp('.../ü§ó/...', 'ui')
    expect(re2.test('foo/ü§ó/bar')).toBe(true)
  })
})
